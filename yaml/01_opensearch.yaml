apiVersion: v1
kind: ServiceAccount
metadata:
  name: opensearch-service-account
  namespace: kube-logging
---
apiVersion: v1
kind: Service
metadata:
  name: opensearch
  namespace: kube-logging
  labels:
    app: opensearch
spec:
  type: ClusterIP
  selector:
    app: opensearch
  ports:
    - port: 9200
      protocol: TCP
      name: http
    - port: 9300
      protocol: TCP
      name: transport
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: os-cluster
  namespace: kube-logging
spec:
  serviceName: opensearch
  selector:
    matchLabels:
      app: opensearch
  replicas: 1
  template:
    metadata:
      name: opensearch
      labels:
        app: opensearch
    spec:
      serviceAccount: opensearch-service-account
      containers:
      - name: opensearch
        image: docker.io/opensearchproject/opensearch:{OS_VERSION}
        imagePullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
        resources:
          limits:
            cpu: 500m
            memory: 3000Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        volumeMounts:
        - name: data
          mountPath: /usr/share/opensearch/data
        - name: config
          mountPath: /usr/share/opensearch/config/opensearch.yml
          subPath: opensearch.yml
        - name: security-config
          mountPath: /usr/share/opensearch/plugins/opensearch-security/securityconfig/config.yml
          subPath: config.yml
          readOnly: true
        - name: opensearch-cert
          mountPath: /usr/share/opensearch/config/certificates
          readOnly: true
        - name: admin-cert
          mountPath: /usr/share/opensearch/config/certificates/admin
          readOnly: true
        - name: role-mapping
          mountPath: /usr/share/opensearch/plugins/opensearch-security/securityconfig/roles_mapping.yml
          subPath: roles_mapping.yml
        - name: user-role
          mountPath: /usr/share/opensearch/plugins/opensearch-security/securityconfig/internal_users.yml
          subPath: internal_users.yml 
        #- name: hyperauth-ca
        #  mountPath: /usr/share/opensearch/config/certificates/hyperauth
        #  readOnly: true
        env:
          - name: cluster.name
            value: os-cluster
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: discovery.seed_hosts
            value: "os-cluster-0.opensearch" #"os-cluster-0.opensearch,os-cluster-1.opensearch,os-cluster-2.opensearch"
          - name: cluster.initial_master_nodes
            value: "os-cluster-0" #"os-cluster-0,os-cluster-1,os-cluster-2"
          - name: OPENSEARCH_JAVA_OPTS
            value: "-Xms2g -Xmx2g"
      initContainers:
      - name: fix-permissions
        image: busybox:{BUSYBOX_VERSION}
        command: ["sh", "-c", "chown -R 1000:1000 /usr/share/opensearch/data"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: data
          mountPath: /usr/share/opensearch/data
      - name: increase-vm-max-map
        image: busybox:{BUSYBOX_VERSION}
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true 
      - name: increase-fd-ulimit
        image: busybox:{BUSYBOX_VERSION}
        command: ["sh", "-c", "ulimit -n 65536"]
        securityContext:
          privileged: true
      volumes:
      - name: config
        configMap:
          name: opensearch-config
      - name: security-config
        configMap:
          name: opensearch-securityconfig
      - name: opensearch-cert
        secret:
          secretName: opensearch-secret
      - name: admin-cert
        secret:
          secretName: admin-secret
      - name: role-mapping
        configMap:
          name: os-role-mapping
      - name: user-role
        configMap:
          name: os-users
      #- name: hyperauth-ca
      #  secret:
      #    secretName: hyperauth-ca
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: opensearch
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {STORAGECLASS_NAME}
      resources:
        requests:
          storage: 50Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opensearch-config
  namespace: kube-logging
  labels:
    app: opensearch
data:
  opensearch.yml: |
    cluster.name: "os-cluster"
    network.host: "0.0.0.0"
    discovery.seed_hosts: os-cluster-0.opensearch
    cluster.initial_master_nodes: os-cluster-0

    plugins.security.ssl.transport.pemkey_filepath: /usr/share/opensearch/config/certificates/tls.key
    plugins.security.ssl.transport.pemcert_filepath: /usr/share/opensearch/config/certificates/tls.crt
    plugins.security.ssl.transport.pemtrustedcas_filepath: /usr/share/opensearch/config/certificates/ca.crt
    plugins.security.ssl.transport.enabled: true
    plugins.security.ssl.transport.enforce_hostname_verification: false
    plugins.security.ssl.http.enabled: true
    plugins.security.ssl.http.pemkey_filepath: /usr/share/opensearch/config/certificates/tls.key
    plugins.security.ssl.http.pemcert_filepath: /usr/share/opensearch/config/certificates/tls.crt
    plugins.security.ssl.http.pemtrustedcas_filepath: /usr/share/opensearch/config/certificates/ca.crt
    plugins.security.allow_unsafe_democertificates: true
    plugins.security.allow_default_init_securityindex: true

    plugins.security.restapi.roles_enabled: ["all_access", "security_rest_api_access"]
    plugins.security.authcz.admin_dn:
      - "CN=admin"
    plugins.security.nodes_dn:
      - "CN=opensearch"
    compatibility.override_main_response_version: true
    plugins.security.system_indices.indices:
            [
              ".opendistro-alerting-config",
              ".opendistro-alerting-alert*",
              ".opendistro-anomaly-results*",
              ".opendistro-anomaly-detector*",
              ".opendistro-anomaly-checkpoints",
              ".opendistro-anomaly-detection-state",
              ".opendistro-reports-*",
              ".opendistro-notifications-*",
              ".opendistro-notebooks",
              ".opendistro-asynchronous-search-response*",
            ]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opensearch-securityconfig
  namespace: kube-logging
  labels:
    app: opensearch
data:
  config.yml: |
    _meta:
       type: "config"
       config_version: 2
    config:
      dynamic:
        authc:
          basic_internal_auth_domain:
            http_enabled: true
            transport_enabled: true
            order: 1
            http_authenticator:
              type: basic
              challenge: false
            authentication_backend:
              type: internal
          openid_auth_domain:
            http_enabled: true
            transport_enabled: true
            order: 0
            http_authenticator:
              type: "openid"
              challenge: false
              config:
                subject_key: preferred_username
                roles_key: roles
                openid_connect_url: https://{HYPERAUTH_URL}/auth/realms/tmax/.well-known/openid-configuration
                openid_connect_idp:
                  enable_ssl: true
                  verify_hostnames: false
                  pemtrustedcas_filepath: /usr/share/opensearch/config/certificates/ca.crt
            authentication_backend:
              type: noop
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: os-role-mapping
  namespace: kube-logging
data:
  roles_mapping.yml: |
    ---
    # In this file users, backendroles and hosts can be mapped to Security roles.
    # Permissions for OpenSearch roles are configured in roles.yml

    _meta:
      type: "rolesmapping"
      config_version: 2

    # Define your roles mapping here

    ## Demo roles mapping

    all_access:
      reserved: false
      backend_roles:
      - "opensearch-admin"
      description: "Maps admin to all_access"

    own_index:
      reserved: false
      users:
      - "*"
      description: "Allow full access to an index named like the username"

    logstash:
      reserved: false
      backend_roles:
      - "logstash"

    kibana_user:
      reserved: false
      backend_roles:
      - "kibanauser"
      description: "Maps kibanauser to kibana_user"

    readall:
      reserved: false
      backend_roles:
      - "readall"

    manage_snapshots:
      reserved: false
      backend_roles:
      - "snapshotrestore"

    kibana_server:
      reserved: true
      users:
      - "kibanaserver"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: os-users
  namespace: kube-logging
data:
  internal_users.yml: |
    ---
    # This is the internal user database
    # The hash value is a bcrypt hash and can be generated with plugin/tools/hash.sh

    _meta:
      type: "internalusers"
      config_version: 2

    # Define your internal users here

    ## Demo users

    admin:
      hash: "$2a$12$VcCDgh2NDk07JGN0rjGbM.Ad41qVR/YFJcgHp0UGns5JDymv..TOG"
      reserved: true
      backend_roles:
      - "opensearch-admin"
      description: "Demo admin user"

    kibanaserver:
      hash: "$2a$12$4AcgAt3xwOWadA5s5blL6ev39OXDNhmOesEoo33eZtrq2N0YrU3H."
      reserved: true
      description: "Demo OpenSearch Dashboards user"

    kibanaro:
      hash: "$2a$12$JJSXNfTowz7Uu5ttXfeYpeYE0arACvcwlPBStB1F.MI7f0U9Z4DGC"
      reserved: false
      backend_roles:
      - "kibanauser"
      - "readall"
      attributes:
        attribute1: "value1"
        attribute2: "value2"
        attribute3: "value3"
      description: "Demo OpenSearch Dashboards read only user"
    
    logstash:
      hash: "$2a$12$u1ShR4l4uBS3Uv59Pa2y5.1uQuZBrZtmNfqB3iM/.jL0XoV9sghS2"
      reserved: false
      backend_roles:
      - "logstash"
      description: "Demo logstash user"

    readall:
      hash: "$2a$12$ae4ycwzwvLtZxwZ82RmiEunBbIPiAmGZduBAjKN0TXdwQFtCwARz2"
      reserved: false
      backend_roles:
      - "readall"
      description: "Demo readall user"

    snapshotrestore:
      hash: "$2y$12$DpwmetHKwgYnorbgdvORCenv4NAK8cPUg8AI6pxLCuWf/ALc0.v7W"
      reserved: false
      backend_roles:
      - "snapshotrestore"
      description: "Demo snapshotrestore user"
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: admin-cert
  namespace: kube-logging
spec:
  secretName: admin-secret
  commonName: admin
  privateKey:
    algorithm: RSA
    encoding: PKCS8
    size: 2048
  isCA: false
  usages:
    - digital signature
    - key encipherment
    - server auth
    - client auth
  issuerRef:
    kind: ClusterIssuer
    group: cert-manager.io
    name: tmaxcloud-issuer
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: opensearch-cert
  namespace: kube-logging
spec:
  secretName: opensearch-secret
  commonName: "opensearch"
  privateKey:
    algorithm: RSA
    encoding: PKCS8
    size: 2048
  usages:
    - digital signature
    - key encipherment
    - server auth
    - client auth
  dnsNames:
    - "tmax-cloud"
    - "opensearch.kube-logging.svc"
  issuerRef:
    kind: ClusterIssuer
    group: cert-manager.io
    name: tmaxcloud-issuer
